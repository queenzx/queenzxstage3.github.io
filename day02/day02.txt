第三阶段 版本控制管理工具
第二天
一、调节vscode的终端
    改成git bash Here
    方法1:
    ctrl+` -> 默认是window的终端,垃圾箱是终止终端,1:md改为选择默认Shell,出现弹框,选择git bash Here 等待结束,垃圾箱终止终端,ctrl+`重新启动终端
    方法2:
    设置->功能->终端->Integrated › Automation Shell: Windows->在setting.json中编辑
    "terminal.integrated.shell.windows": "C:\\Program Files\\Git\\bin\\bash.exe",
    改为:
    "terminal.integrated.shell.windows": "电脑安装git的路径(D:\\Program Files\\Git\\bin\\bash.exe)",

二、git命令:
    1) 查看提交信息
        git log
        补充: 
            -1) git add xxx xxx xxx
                一次性暂存多个文件
            -2) git add -A
                一次性暂存工作区所有有修改的文件
            -3) git commit -a
                跳过暂存,直接提交(untracked除外)
            -4) git add 目录名
                暂存指定目录下所有有修改的文件
        git log --pretty=oneline 在同一行显示
    2) 取消修改
        -1) 取消工作区的修改
            文件被修改后还没有执行git add 命令
            git checkout -- 文件名
            git checkout -- 1.txt
            取消到上一次提交的情况

        -2) 取消暂存区的修改
            文件被修改后执行了git add命令,但是还没有执行git commit命令
            1. 先撤销git add 命令
                git reset HEAD 文件名
            2. 然后再撤销工作区的修改
                git checkout -- 文件名

        -3) 取消分支上的修改
            文件被修改后执行了git add 和 git commit命令(已经提交了)
            无法取消修改
            使用版本回退
            1. 首先先使用git log查看每次提交的id,然后确定需要回退到哪个版本,(HEAD指向是当前版本)
            2. 再使用: git reset --hard id
二、关于HEAD 
    就是一个存盘点,实现版本的控制
    git将每一次的提交串成一条时间线,这条时间线就称为分支
    默认就只有一条分支,master,也称为主分支,而HEAD指向的就是当前分支

    1) 创建分支
        git branch v1
        将当前所在分支复制一条出来,起名为v1
    2) 查看当前仓库有哪些分支
        git branch
        前面有*的表示当前所在分支
    3) 切换分支
        git checkout 分支名
        在一条分支上的修改不会影响到其他分支上的内容
    
    操作:
        -1) git branch v1 将当前所在分支复制一份
        -2) git branch 查看当前仓库所有的分支
        -3) git checkout v1 切换到v1分支
        -4) 操作v1分支上的文件或者文件夹
            1. echo 数据 > 文件名
            2. 提交
                - git add 文件名 / git add -A
                - git commit -m "提示信息"
            3. git status 查看状态
    注: 修改了之后需要提交!!!!

        用git方式隐藏文件:
        - 切换到新创建的v1分支:git checkout v1
        - 删除想要隐藏的文件4.txt:rm 4.txt
        - 提交的两个步骤:
            git add -A 
            git commit -m "删除了4.txt"
        - 此时在v1分支上完成了隐藏,想要查看4.txt文件就需要切换到master分支查看
            git checkout master
    4)分支的合并
        git merge 分支名称
        将指定名称上分支的修改合并到当前分支上
        在master上使用 git merge v2
        将v2的修改合并到master上,v2的内容不会变化,master的内容发生变化
    操作步骤:
        -1)提交master
        -2)创建v2.1分支并切换到v2.1上(git checkout v2.1)
        -3)修改v2.1中2.txt的内容,并暂存提交(echo v2 > 2.txt->git commit -a)
        -4)查看提交信息,观察master和v2.1的位置(git log --pretty=oneline)
        -5)切换到master上,将v2.1的修改合并,再查看提交信息(git checkout master->git merge v2->git log --pretty=oneline)
        -6)查看2.txt的内容有没有变化(cat 2.txt)

    5) 分支的删除
        git branch -d 分支名
        删除指定分支
        如果分支没有合并,则删除失败,可以强制删除
        git branch -D 文件名
        不能删除当前分支
三、gitHub的使用
    https://github.com
    1) 注册登录
        邮箱验证
    2) 创建远程仓库
        右上角+ 选择 new repository
        在repository name中填写远程仓库的名称,其他都不管
    3) 选择https模式
        在命令行中运行
            git remote add origin 远程仓库地址
            这句命令的作用: 添加远程关联
            git remote 是固定语法
            add 添加
            origin 别名(变量) 指代后面远程仓库的地址
        再运行
            git push -u origin master
            作用: 将本地仓库的内容推送到远程仓库
            git push 
            -u 第一次推送时添加,之后就不需要了
                如果没有master分支就创建
            origin 别名,指代添加远程关联时的地址
            master 推送的分支
    4) 查看当前仓库有哪些远程关联
        git remote
    
    5) 删除已经存在的远程关联
        git remote remove 关联名称
    6) HTTPS和SSH
        HTTPS每次推送都需要输入用户名和密码

        SSH需要配置密钥,配置成功后推送就不需要用户名和密码了
        输入命令
            ls -a ~/.ssh查看本机有没有密钥
        创建密钥
            ssh-keygen -t rsa -C "邮箱地址"

            配置秘钥：
            打开id_rsa.pub复制其中的内容
            点击github头像-->settings-->SSH And GPGKeys
            -->Add SSH
            -->Title随便写，将复制的内容粘贴进Key
            -->Add SSH Key
        注：本地的.ssh不能删除
        
    
    视图界面工具的使用 GUI

补充:   从github上下载代码
    1) clone--> download Zip
    2) git clone命令(建议第一次下载的时候使用)
        git clone 远程仓库地址 文件夹名称(自定义)
        git clone https://github.com/shen111123/mini.git test
        该命令会将指定远程仓库完整的克隆下来,包括历史提交信息,而且还会自动添加远程关联
        -  克隆指定分支名远程仓库
        git clone -b 分支名 远程仓库地址
    3) git pull origin master
        将远程仓库的master分支上的修改拉取下来
        一般情况下,第一次下载时使用git clone
        以后同步代码就只使用git pull(拉取)和git push(推送)
        origin:是远程仓库的名字
        master:是分支名
    同一个本地仓库不同分支,上传到同一个远程仓库不同分支
        1)先复制一个分支
            git branch mongooseViews
        2)切换分支
            git checkout mongooseViews
        3)推送到githubs
            git status
            git remote(photo)
            git push -u photo mongooseversion(-u表示第一次推送)
            拉取
            git pull git@github.com:queenzx/photo.github.io.git mongooseversion
    同一个远程仓库不同分支,拉取到本地仓库
        1) git clone 远程仓库地址 文件夹名称(自定义)
            git clone git@github.com:queenzx/photo.github.io.git photo
        2) 切换到photo仓库
            cd photo
        3) 查看分支  git branch
        4) 找出所有分支  git branch -r 或者  git branch -a
        5) 切换到其他分支  git checkout mongooseversion
    本地不同仓库,上传到远程仓库其他分支名
    git push git@github.com:queenzx/test.git master:mongooseversion
                远程仓库地址                   现分支名:\远程仓库分支名
    新建本地仓库与远程仓库的连接
    1)添加远程关联
        git remote add origin git@github.com:queenzx/miniprogram.git
    2)暂存
        git add -A 提交
        git commit -a 暂存所有
    3)暂存之后推送到远程仓库
        git push -u origin master

                   
        

